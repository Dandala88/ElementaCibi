@using ElementaCibi.Data.FdcModels.Constants
@using ElementaCibi.Data.Models.Recipe
@using ElementaCibi.Data.Models;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text.Json
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage LocalStorage;

<select @onchange="OnRecipeChange">
    <option selected>None</option>
    @foreach (var r in Recipes)
    {
        if (SelectedRecipe != null && r == SelectedRecipe)
        {
            <option selected value="@JsonSerializer.Serialize(r)">@r.Name</option>
        }
        else
        {
            <option value="@JsonSerializer.Serialize(r)">@r.Name</option>
        }
    }
</select>

@code {
    [Parameter]
    public List<Recipe> Recipes { get; set; } = new List<Recipe>();
    [Parameter]
    public EventCallback<Recipe> RecipeValueChanged { get; set; }
    [Parameter]
    public Recipe? SelectedRecipe { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var storedRecipes = await LocalStorage.GetAsync<List<Recipe>>(UserData.RecipesKey);

            if (storedRecipes.Value != null)
            {
                Recipes = storedRecipes.Value;
                await SelectRecipe(null);
            }
        }
        catch (Exception ex)
        {
            var t = ex;
        }
    }

    public async Task OnRecipeChange(ChangeEventArgs e)
    {
        SelectedRecipe = null;
        if (e?.Value != null)
        {
            var recipe = JsonSerializer.Deserialize<Recipe>((string)e.Value);
            await SelectRecipe(recipe);
        }
    }

    private async Task SelectRecipe(Recipe? recipe)
    {
        if (recipe != null)
        {
            SelectedRecipe = recipe;
            StateHasChanged();
            await RecipeValueChanged.InvokeAsync(recipe);
        }
    }
}
