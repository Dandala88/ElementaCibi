@page "/food/recipe/builder"
@page "/food/recipe/builder/{foodterm}"
@using ElementaCibi.Data.FdcModels.Constants;
@using ElementaCibi.Data.FdcModels.Search;
@using ElementaCibi.Data.Models;
@using ElementaCibi.Shared.Components;
@using ElementaCibi.Data.Models.Recipe;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject Data.Services.FoodDataCentralService FoodDataCentralService;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage LocalStorage;

<h3>Recipe Builder</h3>
<RecipeEditor @ref="recipeEditor"></RecipeEditor>
<hr />
<EditForm Model="@foodSearch" OnValidSubmit="Search">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <InputText @bind-Value="foodSearch.Term"></InputText>
    <label><InputCheckbox @bind-Value="IncludeSurvey"></InputCheckbox> Survey</label>
    <label><InputCheckbox @bind-Value="IncludeLegacy"></InputCheckbox> Legacy</label>
    <label><InputCheckbox @bind-Value="IncludeFoundation"></InputCheckbox> Foundation</label>
    <label><InputCheckbox @bind-Value="IncludeBranded"></InputCheckbox> Branded</label>
    <label><InputCheckbox @bind-Value="IncludeExperimental"></InputCheckbox> Experimental</label>
    <button type="submit" class="btn btn-primary">Search</button>
</EditForm>
@if(foodSearchResult.Count > 0)
{
    <table class="table">
        <thead class="table-light">
            <tr>
                <th>FDCId</th>
                <th>Description</th>
                <th>Data Type</th>
                <th>Brand</th>
            </tr>
        </thead>
        @foreach(Food food in foodSearchResult)
        {
            <tr @onclick="() => ShowDetails(food.FdcId)">
                <td>@food.FdcId</td>
                <td>@food.Description</td>
                <td>@food.DataType</td>
                <td>@food.Brand</td>
            </tr>
            if(foodDetail != null && food.FdcId == foodDetail.FdcId)
            {
                if (foodDetail?.Portions.Count > 0)
                {
                    <tr>
                        <td>
                            <table>
                                <tr>
                                    <th>Portion</th>
                                    <th> </th>
                                    <th>Quantity</th>
                                </tr>
                                <tr>
                                    <td><PortionSelector Food=@foodDetail PortionValueChanged="OnPortionValueChange"></PortionSelector></td>
                                    <td>×</td>
                                    <td><input @bind-value=CurrentSelectedQuantity type="text" placeholder="Quantity" /></td>
                                    <td style="cursor:crosshair;" @onclick="(e) => AddIngredient(foodDetail, currentSelectedPortion, CurrentSelectedQuantity)">Add</td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                }
            }

        }
    </table>

    <style>
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        tr:hover {
            background-color: dodgerblue;
        }
    </style>
}

@code {
    [Parameter]
    public string? FoodTerm { get; set; }
    [Parameter]
    public bool IncludeBranded { get; set; } = false;
    [Parameter]
    public bool IncludeSurvey { get; set; } = true;
    [Parameter]
    public bool IncludeLegacy { get; set; } = true;
    [Parameter]
    public bool IncludeFoundation { get; set; } = true;
    [Parameter]
    public bool IncludeExperimental { get; set; } = false;

    private RecipeEditor? recipeEditor;

    private float CurrentSelectedQuantity { get; set; } = 1;

    private FoodSearch foodSearch = new FoodSearch();
    private List<Food> foodSearchResult = new List<Food>();
    private Food? foodDetail;
    private Portion currentSelectedPortion = new Portion();

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(FoodTerm) && FoodTerm != foodSearch.Term)
        {
            foodSearch.Term = FoodTerm;
            await Search();
        }
    }

    private async Task Search()
    {
        if (FoodTerm != foodSearch.Term)
        {
            FoodTerm = foodSearch.Term;
            NavigationManager.NavigateTo($"/food/recipe/builder/{FoodTerm}");
        }
        foodSearchResult.Clear();
        var result = await FoodDataCentralService.GetFoodBySearchTerm(foodSearch);
        if(result?.Foods != null)
        {
            foreach(SearchResultFood searchResultFood in result.Foods)
            {
                if (!ShouldShowFood(searchResultFood))
                    continue;

                var f = new Food();
                f.FdcSearchToFood(searchResultFood);
                foodSearchResult.Add(f);
            }
        }
    }

    private async Task ShowDetails(int fdcId)
    {
        foodDetail = await FoodDataCentralService.GetFoodByIdAsync(fdcId.ToString());
    }

    private void OnPortionValueChange(Portion portion)
    {
        currentSelectedPortion = portion;
    }

    private void AddIngredient(Food food, Portion portion, float quantity)
    {
        if (recipeEditor != null)
        {
            recipeEditor.AddIngredient(new Ingredient
                {
                    Food = food,
                    Portion = portion,
                    Quantity = quantity,
                });
        }
    }

    private bool ShouldShowFood(SearchResultFood searchResultFood)
    {
        if (searchResultFood.DataType == FdcDataType.Branded && !IncludeBranded)
            return false;
        if (searchResultFood.DataType == FdcDataType.Foundation && !IncludeFoundation)
            return false;
        if (searchResultFood.DataType == FdcDataType.Legacy && !IncludeLegacy)
            return false;
        if (searchResultFood.DataType == FdcDataType.Survey && !IncludeSurvey)
            return false;
        if (searchResultFood.DataType == FdcDataType.Experimental && !IncludeExperimental)
            return false;
        return true;
    }
}
