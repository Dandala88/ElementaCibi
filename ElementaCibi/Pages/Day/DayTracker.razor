@page "/day/tracker"
@using ElementaCibi.Data.FdcModels.Constants;
@using ElementaCibi.Data.Models.Day;
@using ElementaCibi.Shared.Components
@using ElementaCibi.Data.Models.Recipe;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage LocalStorage;

<h3>Day Tracker</h3>
<h4>@DateOnly.FromDateTime(DateTime.Now)</h4>

@if (!addingMeal)
{
    <button class="btn btn-primary" @onclick="() => addingMeal = true">Add Meal</button>
}
else
{
    <RecipeSelector RecipeValueChanged="OnRecipeValueChanged"></RecipeSelector>
    <button class="btn btn-success" @onclick="() => AddMeal()"><span class="oi oi-check"></span></button>
    <button class="btn btn-danger" @onclick="() => addingMeal = false"><span class="oi oi-x"></span></button>
}
@if (Today()?.Meals != null)
{
    var todaysMeals = Today()?.Meals ?? new List<Meal>();
    <table>
        <tr>
            <th>Meal</th>
            <th>Calories</th>
            <th>Fiber</th>
        </tr>
        @foreach (var meal in todaysMeals)
        {
            @if (meal.Recipe != null)
            {
                <tr>
                    <td> @meal.Recipe.Name </td>
                    <td>@meal.Recipe.Calories</td>
                    <td>@meal.Recipe.Fiber</td>
                    <td><button class="btn btn-danger" @onclick="() => DeleteMeal(meal.Id)"><span class="oi oi-trash"></span></button></td>
                </tr>
            }

        }
        <tr>
            <td><b>Totals</b></td>
            <td><b>@Today()?.Calories</b></td>
            <td><b>@Today()?.Fiber</b></td>
        </tr>
    </table>
}
<hr />
@for(int i = days.Count-1; i >= 0; i--)
{
    var day = days[i];
    <h5>@day.Date</h5>
    <table>
        <tr>
            <th>Meal</th>
            <th>Calories</th>
            <th>Fiber</th>
        </tr>
        @foreach(var meal in day.Meals)
        {
            @if (meal.Recipe != null)
            {
                <tr>
                    <td> @meal.Recipe.Name </td>
                    <td>@meal.Recipe.Calories</td>
                    <td>@meal.Recipe.Fiber</td>
                </tr>
            }
        }
        <tr>
            <td><b>Totals</b></td>
            <td><b>@day?.Calories</b></td>
            <td><b>@day?.Fiber</b></td>
        </tr>
    </table>
}

@code {
    private RecipeSelector? recipeSelector;
    private bool addingMeal;
    private Recipe? currentAddingRecipe;
    private DateTime currentAddingTime;
    private List<Day> days = new List<Day>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var dayStorage = await LocalStorage.GetAsync<List<Day>>(UserData.DaysKey);
        if (dayStorage.Value != null)
        {
            days = dayStorage.Value;
        }
        StateHasChanged();
    }


    private async Task AddMeal()
    {
        if (currentAddingRecipe != null)
        {
            addingMeal = false;
            var meal = new Meal
                {
                    Id = Guid.NewGuid(),
                    Recipe = currentAddingRecipe,
                };

            var today = Today();

            if (today != null)
            {
                today.Meals.Add(meal);
            }
            else
            {
                var newDay = new Day
                {
                    Id = Guid.NewGuid(),
                        Meals = new List<Meal>
                {
                    meal,
                },
                        Date = DateOnly.FromDateTime(DateTime.Now).ToString(),
                    };
                days.Add(newDay);
            }
            await LocalStorage.SetAsync(UserData.DaysKey, days);
        }
    }

    private async Task DeleteMeal(Guid id)
    {
        var today = Today();
        if (today?.Meals != null)
        {
            var dayToUpdate = days.Where(d => d.Id == today.Id).FirstOrDefault();

            var mealToRemove = dayToUpdate?.Meals.Where(m => m.Id == id).FirstOrDefault();
            if (mealToRemove != null)
            {
                dayToUpdate?.Meals.Remove(mealToRemove);
                await LocalStorage.SetAsync(UserData.DaysKey, days);
                StateHasChanged();
            }
        }
    }

    private void OnRecipeValueChanged(Recipe recipe)
    {
        currentAddingRecipe = recipe;
    }

    private Day? Today()
    {
        return days.Where(d => DateOnly.Parse(d.Date) == DateOnly.FromDateTime(DateTime.Now))?.FirstOrDefault();

    }
}
