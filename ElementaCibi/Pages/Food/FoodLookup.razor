@page "/food/lookup"
@page "/food/lookup/{foodterm}"
@using ElementaCibi.Data.FdcModels.Search;
@using ElementaCibi.Data.Models;
@inject Data.Services.FoodDataCentralService FoodDataCentralService;
@inject NavigationManager NavigationManager;

<h3>Food Lookup</h3>

<EditForm Model="@foodSearch" OnValidSubmit="Search">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <InputText @bind-Value="foodSearch.Term"></InputText>
    <button type="submit" class="btn btn-primary">Search</button>
</EditForm>

@if(foodSearchResult.Count > 0)
{
    <table class="table">
        <thead class="table-light">
            <tr>
                <th>FDCId</th>
                <th>Description</th>
                <th>Data Type</th>
                <th>Brand</th>
                <th>Calories</th>
                <th>Fiber</th>
                <th>Ratio</th>
                <th>💯</th>
            </tr>
        </thead>
        @foreach(Food food in foodSearchResult)
        {
            <tr @onclick="() => OpenDetails(food.FdcId)">
                <td>@food.FdcId</td>
                <td>@food.Description</td>
                <td>@food.DataType</td>
                <td>@food.Brand</td>
                <td>
                    @if (food.Calories != null)
                    {
                        @food.Calories.Amount@:&nbsp;@food.Calories.Unit
                    }
                </td>
                <td>
                    @if (food.Fiber != null)
                    {
                        @food.Fiber.Amount@:&nbsp;@food.Fiber.Unit
                    }
                </td>
                <td>@food.Ratio</td>
                <td>@food.Hundred</td>
            </tr>
        }
    </table>
}
else
{
    <b>No results</b>
}

@code {
    [Parameter]
    public string? FoodTerm { get; set; }
    private FoodSearch foodSearch = new FoodSearch();
    private List<Food> foodSearchResult = new List<Food>();

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(FoodTerm))
        {
            foodSearch.Term = FoodTerm;
            await Search();
        }
    }

    private async Task Search()
    {
        if (FoodTerm != foodSearch.Term)
        {
            FoodTerm = foodSearch.Term;
            NavigationManager.NavigateTo($"/food/lookup/{FoodTerm}");
        }
        foodSearchResult.Clear();
        var result = await FoodDataCentralService.GetFoodBySearchTerm(foodSearch);
        if(result?.Foods != null)
        {
            foreach(SearchResultFood searchResultFood in result.Foods)
            {
                var f = new Food();
                f.FdcSearchToFood(searchResultFood);
                foodSearchResult.Add(f);
            }
        }
    }

    private void OpenDetails(int? id)
    {
        if(id != null)
            NavigationManager.NavigateTo($"/food/details/{id}");
    }
}
